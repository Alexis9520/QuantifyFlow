import {
Â  collection,
Â  query,
Â  where,
Â  getDocs,
Â  addDoc,
Â  doc, // Importar doc
Â  getDoc, // Importar getDoc
Â  updateDoc, // Importar updateDoc
Â  serverTimestamp,
  getCountFromServer,
} from 'firebase/firestore';
import { db } from '@/lib/firebase';
import { Project, ProjectUrl, TaskCountBreakdown } from '@/types'; // AsegÃºrate de que este tipo coincida con tu nueva estructura

export interface CreateProjectData {
Â  teamId: string;
Â  name: string;
Â  description?: string;
Â  urls?: ProjectUrl[]; 
}

async function getTaskBreakdown(projectId: string): Promise<TaskCountBreakdown> {
  const tasksRef = collection(db, 'tasks');
  
  // Query base (solo tareas no archivadas)
  const baseQuery = query(
    tasksRef,
    where('projectId', '==', projectId),
    where('isArchived', '==', false)
  );

  // Queries para cada estado
  const allSnap = getCountFromServer(baseQuery);
  const todoSnap = getCountFromServer(query(baseQuery, where('status', '==', 'todo')));
  const inProgressSnap = getCountFromServer(query(baseQuery, where('status', '==', 'in-progress')));
  const doneSnap = getCountFromServer(query(baseQuery, where('status', '==', 'done')));

  // Esperamos todas las consultas en paralelo
  const [allCount, todoCount, inProgressCount, doneCount] = await Promise.all([
    allSnap,
    todoSnap,
    inProgressSnap,
    doneSnap,
  ]);

  return {
    all: allCount.data().count,
    todo: todoCount.data().count,
    inProgress: inProgressCount.data().count,
    done: doneCount.data().count,
  };
}

/**
 * Obtiene todos los proyectos ACTIVOS de un equipo.
 * Ahora incluye el desglose de tareas (todo, inProgress, done).
 */
export async function getProjectsByTeamWithTaskCount(teamId: string): Promise<Project[]> {
Â  if (!teamId) return [];

Â  const projectsRef = collection(db, 'projects');
Â  const projectsQuery = query(
Â  Â  projectsRef,
Â  Â  where('teamId', '==', teamId),
Â  Â  where('status', '==', 'active')
Â  );

Â  const projectsSnapshot = await getDocs(projectsQuery);
Â  const projects = projectsSnapshot.docs.map(doc => {
Â  Â  const data = doc.data();
Â  Â  return {
Â  Â  Â  id: doc.id,
Â  Â  Â  ...data,
Â  Â  Â  urls: data.urls || [],
Â  Â  } as Project;
Â  });

Â  // Para cada proyecto, obtenemos el desglose de tareas
Â  const projectPromises = projects.map(async (project) => {
    const taskCounts = await getTaskBreakdown(project.id); // ðŸ‘ˆ Usamos el helper
Â  Â  return {
Â  Â  Â  ...project,
Â  Â  Â  taskCounts: taskCounts, // ðŸ‘ˆ Asignamos el desglose
Â  Â  };
Â  });

Â  return Promise.all(projectPromises);
}

export async function getArchivedProjectsByTeamWithTaskCount(teamId: string): Promise<Project[]> {
Â  if (!teamId) return [];

Â  const projectsRef = collection(db, 'projects');
Â  const projectsQuery = query(
Â  Â  projectsRef,
Â  Â  where('teamId', '==', teamId),
Â  Â  where('status', '==', 'archived')
Â  );

Â  const projectsSnapshot = await getDocs(projectsQuery);
Â  const projects = projectsSnapshot.docs.map(doc => {
Â  Â  const data = doc.data();
Â  Â  return {
Â  Â  Â  id: doc.id,
Â  Â  Â  ...data,
Â  Â  Â  urls: data.urls || [],
Â  Â  } as Project;
Â  });

Â  // Para cada proyecto, obtenemos el desglose de tareas
Â  const projectPromises = projects.map(async (project) => {
    const taskCounts = await getTaskBreakdown(project.id); // ðŸ‘ˆ Usamos el helper
Â  Â  return {
Â  Â  Â  ...project,
Â  Â  Â  taskCounts: taskCounts, // ðŸ‘ˆ Asignamos el desglose
Â  Â  };
Â  });

Â  return Promise.all(projectPromises);
}


export async function createProject(projectData: CreateProjectData) { 
Â  if (!projectData.teamId || !projectData.name) {
Â  Â  throw new Error("El ID del equipo y el nombre del proyecto son requeridos.");
Â  }

Â  const projectsRef = collection(db, 'projects');
Â  return await addDoc(projectsRef, {
Â  Â  ...projectData,
Â  Â  description: projectData.description || "", 
Â  Â  status: 'active',
Â  Â  urls: projectData.urls || [],
Â  Â  createdAt: serverTimestamp(),
Â  Â  updatedAt: serverTimestamp(),
Â  });
}

export async function getProjectById(projectId: string): Promise<Project | null> {
Â  if (!projectId) return null;

Â  const projectRef = doc(db, 'projects', projectId);
Â  const projectSnap = await getDoc(projectRef);

Â  if (!projectSnap.exists()) {
Â  Â  console.error("No se encontrÃ³ el proyecto con ID:", projectId);
Â  Â  return null;
Â  }

Â  const data = projectSnap.data();
  const taskCounts = await getTaskBreakdown(projectId); // ðŸ‘ˆ Usamos el helper

Â  return {
Â  Â  id: projectSnap.id,
Â  Â  ...data,
Â  Â  urls: data.urls || [],
Â  Â  taskCounts: taskCounts, // ðŸ‘ˆ Asignamos el desglose
Â  } as Project;
}
export interface UpdateProjectData {
Â  name?: string;
Â  description?: string;
Â  urls?: ProjectUrl[];
}


export async function updateProject(
Â  projectId: string,
Â  dataToUpdate: UpdateProjectData
) {
Â  if (!projectId) {
Â  Â  throw new Error("El ID del proyecto es requerido para actualizar.");
Â  }

Â  const projectRef = doc(db, 'projects', projectId);

Â  return await updateDoc(projectRef, {
Â  Â  ...dataToUpdate,
Â  Â  updatedAt: serverTimestamp(),
Â  });
}

export async function archiveProject(projectId: string) {
Â  if (!projectId) {
Â  Â  throw new Error("El ID del proyecto es requerido para archivar.");
Â  }

Â  const projectRef = doc(db, 'projects', projectId);

Â  return await updateDoc(projectRef, {
Â  Â  status: 'archived',
Â  Â  updatedAt: serverTimestamp(),
Â  });
}
export async function unarchivedProject(projectId: string) {
Â  if (!projectId) {
Â  Â  throw new Error("El ID del proyecto es requerido para archivar.");
Â  }

Â  const projectRef = doc(db, 'projects', projectId);

Â  return await updateDoc(projectRef, {
Â  Â  status: 'active',
Â  Â  updatedAt: serverTimestamp(),
Â  });
}